creación de carpeta angular
uso de terminal bash en vscode
npm install -g npm@latest
npm install -g @angular/cli
ng v
ng new motos
no
no
CSS
yes

open folder motos
terminal new terminal > bash
TIJERO@Heisenberg MINGW64 ~/Desktop/PW2_LABA_2025/PW2_Lab9_10_Angular/motos (main)
ng serve -o 	//'-o' levantar proyecto y disponer en navegador

//git config --global core.autocrlf true
//git status --short

ng generate component components/header
ng generate component components/footer
ng generate component pages/home
ng generate component pages/products
ng generate component pages/about
ng generate component pages/contact

modificación en style.css: influye a todos

app.routes.ts //generación del enrutamiento: posibilidad dé cada vez que da click > conducir al usuario a alguna pagina dentro del sitio
//versiones anteriores se tenia que construir manualmente, ahora viene por defecto

modificación de app.routes.ts

modificación de componenete de encabezado header.ts
RouterModule //permitir poder llamar a cada una de nuestras paginas sin tener que estar recargando la misma 
modificación de header.html

app.ts //componente principal
agregación de Header y Footer
app.html
prefijo app-header en selector en headers.ts
para campbiarlo > angular.json "prefix":"app",
modificación de app.html
router-outlet> //reconocer todas as rutas creadas específicamente dentro del archivo de rutas, en app.routes.ts

package.json //manera de iniciar servidor usando npm start

//href en header.html hace que recargue la pagina, si no queremos que recargue lo sustituiremos por routerLink CtrlD
confirmando que se llamen igual en app.routes.ts que en cada archivo .ts ejm:
export class Products {
{path: 'productos', component: Products },

modificaciones en header(.html y .css) y style.css

modificación en home.html(inicio)
colocamos imágenes en public
//angular.json preconfigurado para que los archivos staticos(recursos) > assets > carpeta public
modificación en footer.html, products.html, contact.html y estilos

Servicios - mostrar productos
Los servicios nos permiten separar la lógica y los datos que pueden ser reutilizados por múltiples componentes la idea es que un servicio nosotros lo podemos crear y posteriormente estos servicios los podemos inyectar dentro de cualquier componente y por eso se trabaja con "Inyección de dependencias"

parar el servidor
ng generate service services/products
//products.spec.ts archivo para las pruebas unitarias
//products.ts archivo generado

services/products.ts getproducts retorna lo que esta arriba declarado (los productos) se crea interface aqui
products/products.ts se importa interface aqui
adentro de productos se necesita que de alguna forma se pueda traer de vuelta el recurso product
servicio Products> inyectado en product

renderización
+products.html
+products.css

Evaluación de la Directiva @for
Angular verifica el array productos en el componente TypeScript
Crea un TemplateRef para el bloque <article>
Utiliza producto.id como identificador único para optimización (trackBy automático)

Generación de Elementos Dinámicos
Por cada elemento en productos:
Crea un elemento <article> con su propio contexto
Establece el ámbito léxico para las variables del producto
Aplica el CSS scope del componente (gracias a View Encapsulation)

Data Binding de Propiedades
Mecanismo de actualización:
Angular crea un Property Binding unidireccional
Actualiza los atributos cuando cambia producto.imagen o producto.nombre
Usa SafeUrl para sanitización automática de URLs

Interpolacion de Texto
Proceso de renderizado:
Crea nodos de texto con document.createTextNode()
Establece un watcher para cambios en las propiedades
Actualiza solo los textos modificados (detección de cambios granular)